// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
   // Put you code here:

   // Sel ZX
   Mux16(a=x, b=false, sel=zx, out=mux16OutZeroX); // Get first Zero X from Input.
   // Sel ZY
   Mux16(a=y, b=false, sel=zy, out=mux16OutZeroY); // Get first Zero Y from Input.

   Not16(in=mux16OutZeroX, out=not16OutZeroX); // Get inverted output of mux 16 zero X as not 16 zero X.
   Not16(in=mux16OutZeroY, out=not16OutZeroY); // Get inverted output of mux 16 zero Y as not 16 zero Y.

   // Sel NX
   Mux16(a=mux16OutZeroX, b=not16OutZeroX, sel=nx, out=mux16OutXX); // Get output for mux 16 zero x and not 16 zero x.
   // Sel NY
   Mux16(a=mux16OutZeroY, b=not16OutZeroY, sel=ny, out=mux16OutYY); // Get output for mux 16 zero y and not 16 zero y.

   Add16(a=mux16OutXX, b=mux16OutYY, out=add16OutXXYY);
   And16(a=mux16OutYY, b=mux16OutXX, out=and16OutYYXX);

   // Sel F
   Mux16(a=and16OutYYXX, b=add16OutXXYY, sel=f, out=mux16OutCombinerXXYY);

   Not16(in=mux16OutCombinerXXYY, out=not16OutCombinerXXYY);

   // Sel NO
   //Mux16(a=mux16OutCombinerXXYY, b=not16OutCombinerXXYY, sel=no, out=out, out=16bitOutput, out[15]=ng);
   Mux16(a=mux16OutCombinerXXYY, b=not16OutCombinerXXYY, sel=no, out=out, out[15]=ng, out[0..7]=or8bitWayZeroSeven, out[8..15]=or8bitWayEightFifthteen);

   Or8Way(in=or8bitWayZeroSeven, out=or8WayOutZeroSeven);
   Or8Way(in=or8bitWayEightFifthteen, out=or8WayOutEightFifthteen);
   Or(a=or8WayOutZeroSeven, b=or8WayOutEightFifthteen, out=orOutZeroSevenEightFithteen);
   Not(in=orOutZeroSevenEightFithteen, out=zr);
}